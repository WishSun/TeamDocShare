!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddNewGroup	server/src/GroupManage.cpp	/^bool GroupManage::AddNewGroup(GroupInfo *pG)$/;"	f	class:GroupManage
AddNewUser	server/src/UserManage.cpp	/^bool UserManage::AddNewUser(UserInfo *pUser)$/;"	f	class:UserManage
AddTaskFdToEpoll	server/src/Task.cpp	/^void Task::AddTaskFdToEpoll( int epollFd )$/;"	f	class:Task
AddTaskToFree	server/src/TaskThread.cpp	/^void TaskThread::AddTaskToFree(Task *pTask)$/;"	f	class:TaskThread
AllocConn	server/src/GroupManage.cpp	/^MYSQL* GroupManage::AllocConn()                 $/;"	f	class:GroupManage
AllocConn	server/src/UserManage.cpp	/^MYSQL* UserManage::AllocConn()$/;"	f	class:UserManage
AppendTask	server/src/ThreadPool.cpp	/^bool ThreadPool::AppendTask(Task *pTask)$/;"	f	class:ThreadPool
AppendTaskToPool	server/src/MyThreadPool.cpp	/^bool MyThreadPool::AppendTaskToPool( Protocol& prot )$/;"	f	class:MyThreadPool
AutoUpload	client/src/AutoUpload.cpp	/^AutoUpload::AutoUpload()$/;"	f	class:AutoUpload
AutoUpload	client/src/AutoUpload.h	/^class AutoUpload$/;"	c
BIG_THR_LIST_LENGTH	server/src/ThreadPool.cpp	15;"	d	file:
BIG_THR_NUM	server/src/ThreadPool.cpp	11;"	d	file:
BIN	client/src/Makefile	/^BIN=.\/client$/;"	m
BIN	server/src/Makefile	/^BIN=.\/server$/;"	m
CONF_PATH	client/src/main.cpp	15;"	d	file:
CONF_PATH	server/src/main.cpp	15;"	d	file:
ChangeMyGroup	client/src/Client.cpp	/^bool Client::ChangeMyGroup(int gid) $/;"	f	class:Client
ChangeUserGroupID	server/src/UserManage.cpp	/^bool UserManage::ChangeUserGroupID(char *pName, int gid)$/;"	f	class:UserManage
CheckLogin	client/src/Client.cpp	/^bool Client::CheckLogin()$/;"	f	class:Client
CheckRegister	client/src/Client.cpp	/^bool Client::CheckRegister()$/;"	f	class:Client
Client	client/src/Client.cpp	/^Client::Client(char *ip, int port)  $/;"	f	class:Client
Client	client/src/Client.h	/^class Client$/;"	c
Cond	common/inc/common.h	/^    Cond()$/;"	f	class:Cond
Cond	common/inc/common.h	/^class Cond$/;"	c
ConnectServer	client/src/Client.cpp	/^bool Client::ConnectServer()$/;"	f	class:Client
CreateBigThreadPool	server/src/ThreadPool.cpp	/^ThreadPool* ThreadPool::CreateBigThreadPool(int epollFd)$/;"	f	class:ThreadPool
CreateEpoll	server/src/Server.cpp	/^bool Server::CreateEpoll()$/;"	f	class:Server
CreateGroupManage	server/src/GroupManage.cpp	/^GroupManage* GroupManage::CreateGroupManage()  $/;"	f	class:GroupManage
CreateMyThreadPool	server/src/MyThreadPool.cpp	/^MyThreadPool* MyThreadPool::CreateMyThreadPool(int epollFd)$/;"	f	class:MyThreadPool
CreateNewGroup	client/src/Client.cpp	/^void Client::CreateNewGroup( GroupInfo *pGroup )$/;"	f	class:Client
CreateServer	server/src/Server.cpp	/^Server* Server::CreateServer(char *ip, int port)$/;"	f	class:Server
CreateSmallThreadPool	server/src/ThreadPool.cpp	/^ThreadPool* ThreadPool::CreateSmallThreadPool(int epollFd)$/;"	f	class:ThreadPool
CreateSocket	server/src/Server.cpp	/^bool Server::CreateSocket()$/;"	f	class:Server
CreateUserManage	server/src/UserManage.cpp	/^UserManage* UserManage::CreateUserManage()$/;"	f	class:UserManage
DelUser	server/src/UserManage.cpp	/^bool UserManage::DelUser(char *pName)$/;"	f	class:UserManage
DownloadTeamFile	client/src/Client.cpp	/^void Client::DownloadTeamFile(char *filePath)$/;"	f	class:Client
EpollAdd	server/src/Server.cpp	/^void Server::EpollAdd(int fd, bool noneblock)$/;"	f	class:Server
EpollDel	server/src/Server.cpp	/^void Server::EpollDel(int fd)$/;"	f	class:Server
ExchangeList	server/src/TaskThread.cpp	/^void TaskThread::ExchangeList()$/;"	f	class:TaskThread
ExecuteTask	server/src/Task.cpp	/^bool Task::ExecuteTask()$/;"	f	class:Task
FindUser	server/src/UserManage.cpp	/^bool UserManage::FindUser(UserInfo *pUser)$/;"	f	class:UserManage
FreeConn	server/src/GroupManage.cpp	/^void GroupManage::FreeConn(MYSQL *pMysql)$/;"	f	class:GroupManage
FreeConn	server/src/UserManage.cpp	/^void UserManage::FreeConn(MYSQL *pMysql)$/;"	f	class:UserManage
GetAllGroupInfo	client/src/Client.cpp	/^void Client::GetAllGroupInfo()      $/;"	f	class:Client
GetFileList	server/src/UserManage.cpp	/^int  UserManage::GetFileList(char *pName, int gid, char **pList)$/;"	f	class:UserManage
GetFilePathInMD5	server/src/UserManage.cpp	/^bool UserManage::GetFilePathInMD5(char *pMD5, char *filePath)$/;"	f	class:UserManage
GetFreeNum	server/src/TaskThread.cpp	/^int TaskThread::GetFreeNum()$/;"	f	class:TaskThread
GetGroupList	server/src/GroupManage.cpp	/^GroupInfo* GroupManage::GetGroupList()$/;"	f	class:GroupManage
GetMyGroupInfo	client/src/Client.cpp	/^void Client::GetMyGroupInfo()       $/;"	f	class:Client
GetTeamFileList	client/src/Client.cpp	/^void Client::GetTeamFileList()      $/;"	f	class:Client
GroupInfo	common/inc/common.h	/^struct GroupInfo$/;"	s
GroupManage	server/src/GroupManage.cpp	/^GroupManage::GroupManage(int initNum, int maxNum)   $/;"	f	class:GroupManage
GroupManage	server/src/GroupManage.h	/^class GroupManage$/;"	c
HandleChangeGroup	server/src/Task.cpp	/^bool Task::HandleChangeGroup()$/;"	f	class:Task
HandleCreateGroup	server/src/Task.cpp	/^bool Task::HandleCreateGroup()$/;"	f	class:Task
HandleDownloadFile	server/src/Task.cpp	/^bool Task::HandleDownloadFile()$/;"	f	class:Task
HandleGetFileList	server/src/Task.cpp	/^bool Task::HandleGetFileList()$/;"	f	class:Task
HandleGetGroupList	server/src/Task.cpp	/^bool Task::HandleGetGroupList()$/;"	f	class:Task
HandleGetMyGroupInfo	server/src/Task.cpp	/^bool Task::HandleGetMyGroupInfo()$/;"	f	class:Task
HandleUploadFile	server/src/Task.cpp	/^bool Task::HandleUploadFile()$/;"	f	class:Task
HandleUserLogin	server/src/Task.cpp	/^bool Task::HandleUserLogin()$/;"	f	class:Task
HandleUserRegister	server/src/Task.cpp	/^bool Task::HandleUserRegister()$/;"	f	class:Task
IP_LENGTH	common/inc/common.h	34;"	d
MAX_EVENT_NUMBER	server/src/Server.cpp	22;"	d	file:
MAX_FD	server/src/Server.cpp	19;"	d	file:
MD5_LENGTH	common/inc/common.h	28;"	d
Mutex	common/inc/common.h	/^    Mutex()$/;"	f	class:Mutex
Mutex	common/inc/common.h	/^class Mutex$/;"	c
MyThreadPool	server/src/MyThreadPool.cpp	/^MyThreadPool::MyThreadPool(int epollFd)$/;"	f	class:MyThreadPool
MyThreadPool	server/src/MyThreadPool.h	/^class MyThreadPool$/;"	c
NAME_LENGTH	common/inc/common.h	22;"	d
OBJ	client/src/Makefile	/^OBJ=$(patsubst %.cpp, %.o, $(SRC))$/;"	m
OBJ	server/src/Makefile	/^OBJ=$(patsubst %.cpp, %.o, $(SRC))$/;"	m
PATH_LENGTH	common/inc/common.h	19;"	d
PTYPE	common/inc/common.h	/^enum PTYPE$/;"	g
PTYPE_CHANGE_GROUP	common/inc/common.h	/^    PTYPE_CHANGE_GROUP,         \/* 更改所属组*\/$/;"	e	enum:PTYPE
PTYPE_CREATE_GROUP	common/inc/common.h	/^    PTYPE_CREATE_GROUP,         \/* 创建新组*\/$/;"	e	enum:PTYPE
PTYPE_DOWNLOAD_FILE	common/inc/common.h	/^    PTYPE_DOWNLOAD_FILE,        \/* 下载文件*\/$/;"	e	enum:PTYPE
PTYPE_ERROR	common/inc/common.h	/^    PTYPE_ERROR,                \/* 出错的请求或处理*\/$/;"	e	enum:PTYPE
PTYPE_GET_FILE_LIST	common/inc/common.h	/^    PTYPE_GET_FILE_LIST,        \/* 获取团队文件列表*\/$/;"	e	enum:PTYPE
PTYPE_GET_GROUP_LIST	common/inc/common.h	/^    PTYPE_GET_GROUP_LIST,       \/* 获取所有组信息列表*\/$/;"	e	enum:PTYPE
PTYPE_GET_MY_GROUP_INFO	common/inc/common.h	/^    PTYPE_GET_MY_GROUP_INFO,    \/* 获取用户自己的组信息*\/$/;"	e	enum:PTYPE
PTYPE_LOGIN	common/inc/common.h	/^    PTYPE_LOGIN,                \/* 登录*\/$/;"	e	enum:PTYPE
PTYPE_REGISTER	common/inc/common.h	/^    PTYPE_REGISTER,             \/* 注册*\/$/;"	e	enum:PTYPE
PTYPE_TRUE	common/inc/common.h	/^    PTYPE_TRUE                  \/* 正确的请求*\/$/;"	e	enum:PTYPE
PTYPE_UPLOAD_FILE	common/inc/common.h	/^    PTYPE_UPLOAD_FILE = 0,      \/* 上传文件*\/$/;"	e	enum:PTYPE
PWD_LENGTH	common/inc/common.h	25;"	d
PerrExit	client/src/Client.cpp	/^void PerrExit(const char *s)$/;"	f
PrintFunctionUI	client/src/Client.cpp	/^void Client::PrintFunctionUI()      $/;"	f	class:Client
PrintLoginRegisterUI	client/src/Client.cpp	/^void Client::PrintLoginRegisterUI()$/;"	f	class:Client
Protocol	common/inc/common.h	/^    Protocol()$/;"	f	struct:Protocol
Protocol	common/inc/common.h	/^struct Protocol$/;"	s
RecvData	client/src/Client.cpp	/^bool RecvData( int sockFd, char *buf, int size )$/;"	f
Run	client/src/Client.cpp	/^void Client::Run()      $/;"	f	class:Client
Run	server/src/Server.cpp	/^void Server::Run()$/;"	f	class:Server
Run	server/src/TaskThread.cpp	/^void* TaskThread::Run(void *arg)$/;"	f	class:TaskThread
SMA_THR_LIST_LENGTH	server/src/ThreadPool.cpp	16;"	d	file:
SMA_THR_NUM	server/src/ThreadPool.cpp	12;"	d	file:
SRC	client/src/Makefile	/^SRC=$(wildcard .\/*.cpp)$/;"	m
SRC	server/src/Makefile	/^SRC=$(wildcard .\/*.cpp)$/;"	m
ScanDirent	client/src/AutoUpload.cpp	/^void *AutoUpload::ScanDirent(void *arg)$/;"	f	class:AutoUpload
SendData	client/src/Client.cpp	/^bool SendData( int sockFd, char *buf, int size )$/;"	f
Server	server/src/Server.cpp	/^Server::Server(char *ip, int port)$/;"	f	class:Server
Server	server/src/Server.h	/^class Server$/;"	c
SetFilePathtoMD5Map	server/src/UserManage.cpp	/^bool UserManage::SetFilePathtoMD5Map(char *pMD5, char *filePath)$/;"	f	class:UserManage
StartAutoUpload	client/src/Client.cpp	/^void Client::StartAutoUpload()$/;"	f	class:Client
TEXT_LENGTH	common/inc/common.h	31;"	d
TYPE_DOUBLE	common/inc/parseCfg.h	/^    TYPE_DOUBLE,$/;"	e	enum:__value_type_t
TYPE_INT	common/inc/parseCfg.h	/^    TYPE_INT = 0,$/;"	e	enum:__value_type_t
TYPE_LONG	common/inc/parseCfg.h	/^    TYPE_LONG,$/;"	e	enum:__value_type_t
TYPE_STRING	common/inc/parseCfg.h	/^    TYPE_STRING$/;"	e	enum:__value_type_t
Task	server/src/Task.cpp	/^Task::Task(const Protocol& prot)$/;"	f	class:Task
Task	server/src/Task.h	/^class Task$/;"	c
TaskIsFinish	server/src/Task.cpp	/^bool Task::TaskIsFinish()$/;"	f	class:Task
TaskThread	server/src/TaskThread.cpp	/^TaskThread::TaskThread( int epollFd, int maxLength )$/;"	f	class:TaskThread
TaskThread	server/src/TaskThread.h	/^class TaskThread$/;"	c
ThreadPool	server/src/ThreadPool.cpp	/^ThreadPool::ThreadPool( int epollFd, bool isBig ) $/;"	f	class:ThreadPool
ThreadPool	server/src/ThreadPool.h	/^class ThreadPool$/;"	c
UploadFile	client/src/AutoUpload.cpp	/^void *AutoUpload::UploadFile(void *arg)$/;"	f	class:AutoUpload
UploadTask	client/src/UploadTask.h	/^struct UploadTask$/;"	s
UserInfo	common/inc/common.h	/^struct UserInfo$/;"	s
UserManage	server/src/UserManage.cpp	/^UserManage::UserManage(int initNum, int maxNum)$/;"	f	class:UserManage
UserManage	server/src/UserManage.h	/^class UserManage$/;"	c
UserRequest	server/src/Server.cpp	/^    UserRequest(): haveRecv(0),needRecv(-1){}$/;"	f	struct:UserRequest
UserRequest	server/src/Server.cpp	/^struct UserRequest$/;"	s	file:
_AUTOUPLOAD_H	client/src/AutoUpload.h	9;"	d
_CLIENT_H	client/src/Client.h	9;"	d
_GROUPMANAGE_H	server/src/GroupManage.h	9;"	d
_LOCKER_H	common/inc/common.h	9;"	d
_MYTHREADPOOL_H	server/src/MyThreadPool.h	9;"	d
_PARSE_CONFIGURE_FILE_H	common/inc/parseCfg.h	10;"	d
_SERVER_H	server/src/Server.h	9;"	d
_TASKTHREAD_H	server/src/TaskThread.h	9;"	d
_TASK_H	server/src/Task.h	9;"	d
_THREADPOOL_H	server/src/ThreadPool.h	9;"	d
_UPLOADTASK_H	client/src/UploadTask.h	9;"	d
_USERMANAGE_H	server/src/UserManage.h	9;"	d
__value_type_t	common/inc/parseCfg.h	/^enum __value_type_t$/;"	g
conf_path	client/src/main.cpp	/^char conf_path[ PATH_LENGTH ] = {0};$/;"	v
conf_path	server/src/main.cpp	/^char conf_path[ PATH_LENGTH ] = {0};$/;"	v
filePath	client/src/UploadTask.h	/^    char filePath[ PATH_LENGTH ];$/;"	m	struct:UploadTask
get_ip_port	client/src/main.cpp	/^int get_ip_port(char *conf_path, char *ip, int *port)$/;"	f
get_ip_port	server/src/main.cpp	/^int get_ip_port(char *conf_path, char *ip, int *port)$/;"	f
get_path	client/src/main.cpp	/^static int get_path()$/;"	f	file:
get_path	server/src/main.cpp	/^static int get_path()$/;"	f	file:
handle_t	common/inc/common.h	/^typedef void*(* handle_t )(void*);$/;"	t
haveRecv	server/src/Server.cpp	/^    int haveRecv;$/;"	m	struct:UserRequest	file:
lock	common/inc/common.h	/^    bool lock()$/;"	f	class:Mutex
m_IP	server/src/Server.h	/^    char    m_IP[ IP_LENGTH ];  \/* 服务器监听地址*\/$/;"	m	class:Server
m_PType	common/inc/common.h	/^    PTYPE   m_PType;        \/* 请求类型*\/$/;"	m	struct:Protocol
m_busyIdx	server/src/TaskThread.h	/^    int m_busyIdx;              \/* 繁忙任务链表下标*\/$/;"	m	class:TaskThread
m_cond	client/src/AutoUpload.h	/^    Cond    m_cond;            \/* 条件变量*\/$/;"	m	class:AutoUpload
m_cond	common/inc/common.h	/^    pthread_cond_t  m_cond;$/;"	m	class:Cond
m_cond	server/src/TaskThread.h	/^    Cond    m_cond;         \/* 条件变量*\/$/;"	m	class:TaskThread
m_connQue	server/src/GroupManage.h	/^    queue<MYSQL*> m_connQue;  \/* 数据库连接队列*\/$/;"	m	class:GroupManage
m_connQue	server/src/UserManage.h	/^    queue<MYSQL*>  m_connQue;    \/* 数据库连接队列*\/$/;"	m	class:UserManage
m_contentLength	common/inc/common.h	/^    int64_t m_contentLength;\/* 协议包后边的数据实体字节数*\/$/;"	m	struct:Protocol
m_count	server/src/TaskThread.h	/^    int m_count;                \/* 记录执行任务链表轮转次数*\/$/;"	m	class:TaskThread
m_epollFd	server/src/Server.h	/^    int     m_epollFd;          \/* I\/O多路复用epoll事件监听集合句柄*\/$/;"	m	class:Server
m_epollFd	server/src/TaskThread.h	/^    int m_epollFd;          \/* epoll监听集合句柄*\/$/;"	m	class:TaskThread
m_fileFd	common/inc/common.h	/^    int     m_fileFd;       \/* 文件描述符*\/$/;"	m	struct:Protocol
m_fileFd	server/src/Task.h	/^    int       m_fileFd;     \/* 文件描述符*\/$/;"	m	class:Task
m_fileMD5	common/inc/common.h	/^    char    m_fileMD5[ MD5_LENGTH ];     \/* 文件的MD5码*\/$/;"	m	struct:Protocol
m_filePath	common/inc/common.h	/^    char    m_filePath[ PATH_LENGTH ];   \/* 文件路径*\/$/;"	m	struct:Protocol
m_freeIdx	server/src/TaskThread.h	/^    int m_freeIdx;              \/* 空闲任务链表下标*\/$/;"	m	class:TaskThread
m_groupID	common/inc/common.h	/^    int     m_groupID;      \/* 用户所属ID*\/$/;"	m	struct:Protocol
m_groupID	common/inc/common.h	/^    int  m_groupID;                       \/* 所属组ID*\/$/;"	m	struct:UserInfo
m_groupID	common/inc/common.h	/^    int  m_groupID;                  \/* 群组ID*\/$/;"	m	struct:GroupInfo
m_groupInfo	common/inc/common.h	/^    char m_groupInfo[ TEXT_LENGTH ]; \/* 群组简介*\/ $/;"	m	struct:GroupInfo
m_groupMemNum	common/inc/common.h	/^    int  m_groupMemNum;              \/* 群组成员数*\/$/;"	m	struct:GroupInfo
m_groupName	common/inc/common.h	/^    char m_groupName[ NAME_LENGTH ]; \/* 群组名*\/$/;"	m	struct:GroupInfo
m_haveProcessLength	common/inc/common.h	/^    int64_t m_haveProcessLength;  \/* 已处理的大小字节数*\/$/;"	m	struct:Protocol
m_haveRecv	server/src/Task.h	/^    int       m_haveRecv;   \/* 已经发送的字节数*\/$/;"	m	class:Task
m_haveSend	server/src/Task.h	/^    int       m_haveSend;   \/* 已经读取的字节数*\/$/;"	m	class:Task
m_isBig	server/src/ThreadPool.h	/^    bool m_isBig;$/;"	m	class:ThreadPool
m_isBigTask	server/src/TaskThread.h	/^    bool    m_isBigTask;    \/* 是否为大任务线程*\/$/;"	m	class:TaskThread
m_isFinish	server/src/Task.h	/^    bool      m_isFinish;   \/* 任务是否已完成*\/$/;"	m	class:Task
m_listenFd	server/src/Server.h	/^    int     m_listenFd;         \/* 服务器监听套接字描述符*\/$/;"	m	class:Server
m_maxConnNum	server/src/GroupManage.h	/^    int    m_maxConnNum;      \/* 最大支持的数据库连接数*\/$/;"	m	class:GroupManage
m_maxConnNum	server/src/UserManage.h	/^    int     m_maxConnNum;        \/* 最大支持的数据库连接数*\/$/;"	m	class:UserManage
m_maxLength	server/src/TaskThread.h	/^    int     m_maxLength;    \/* 线程的任务链表的最大长度*\/$/;"	m	class:TaskThread
m_mutex	client/src/AutoUpload.h	/^    Mutex   m_mutex;           \/* 互斥锁*\/$/;"	m	class:AutoUpload
m_mutex	client/src/Client.h	/^    Mutex m_mutex;          \/* 互斥锁*\/$/;"	m	class:Client
m_mutex	common/inc/common.h	/^    pthread_mutex_t  m_mutex;$/;"	m	class:Mutex
m_mutex	common/inc/common.h	/^    pthread_mutex_t m_mutex;$/;"	m	class:Cond
m_mutex	server/src/GroupManage.h	/^    Mutex  m_mutex;           \/* 互斥锁*\/$/;"	m	class:GroupManage
m_mutex	server/src/TaskThread.h	/^    Mutex   m_mutex;        \/* 互斥量*\/$/;"	m	class:TaskThread
m_mutex	server/src/UserManage.h	/^    Mutex   m_mutex;             \/* 互斥锁*\/$/;"	m	class:UserManage
m_needRecv	server/src/Task.h	/^    int       m_needRecv;   \/* 需要发送的字节数*\/$/;"	m	class:Task
m_needSend	server/src/Task.h	/^    int       m_needSend;   \/* 需要读取的字节数*\/$/;"	m	class:Task
m_pAutoUpload	client/src/Client.h	/^    AutoUpload *m_pAutoUpload;       \/* 自动上传类对象*\/$/;"	m	class:Client
m_pBigTaskPool	server/src/ThreadPool.cpp	/^ThreadPool* ThreadPool::m_pBigTaskPool = NULL;$/;"	m	class:ThreadPool	file:
m_pBigTaskPool	server/src/ThreadPool.h	/^    static ThreadPool *m_pBigTaskPool;    \/* 大任务线程池单例对象*\/$/;"	m	class:ThreadPool
m_pBigThrPool	server/src/MyThreadPool.h	/^    ThreadPool *m_pBigThrPool;  \/* 大任务线程池对象*\/$/;"	m	class:MyThreadPool
m_pBigThreads	server/src/ThreadPool.h	/^    vector<TaskThread*> m_pBigThreads;   \/* 大任务线程数组*\/$/;"	m	class:ThreadPool
m_pGM	server/src/GroupManage.h	/^    static GroupManage  *m_pGM;  \/* 群组管理类对象单例指针*\/$/;"	m	class:GroupManage
m_pGM	server/src/Task.h	/^    GroupManage *m_pGM;  \/* 群组管理类单例对象*\/$/;"	m	class:Task
m_pMyThreadpool	server/src/MyThreadPool.cpp	/^MyThreadPool* MyThreadPool::m_pMyThreadpool = NULL;$/;"	m	class:MyThreadPool	file:
m_pMyThreadpool	server/src/MyThreadPool.h	/^    static MyThreadPool *m_pMyThreadpool; \/* 单例线程池包装类单例对象*\/$/;"	m	class:MyThreadPool
m_pMyThreadpool	server/src/Server.h	/^    MyThreadPool *m_pMyThreadpool;      \/* 线程池对象集合*\/$/;"	m	class:Server
m_pServer	server/src/Server.cpp	/^Server* Server::m_pServer = NULL;$/;"	m	class:Server	file:
m_pServer	server/src/Server.h	/^    static Server *m_pServer;           \/* 单例服务器监听类对象*\/$/;"	m	class:Server
m_pSmaThrPool	server/src/MyThreadPool.h	/^    ThreadPool *m_pSmaThrPool;  \/* 小任务线程池对象*\/$/;"	m	class:MyThreadPool
m_pSmaThreads	server/src/ThreadPool.h	/^    vector<TaskThread*> m_pSmaThreads;   \/* 小任务线程数组*\/$/;"	m	class:ThreadPool
m_pSmallTaskPool	server/src/ThreadPool.cpp	/^ThreadPool* ThreadPool::m_pSmallTaskPool = NULL;$/;"	m	class:ThreadPool	file:
m_pSmallTaskPool	server/src/ThreadPool.h	/^    static ThreadPool *m_pSmallTaskPool;  \/* 小任务线程池单例对象*\/$/;"	m	class:ThreadPool
m_pUM	server/src/Task.h	/^    UserManage  *m_pUM;  \/* 用户管理类单例对象*\/$/;"	m	class:Task
m_pUM	server/src/UserManage.h	/^    static UserManage *m_pUM;    \/* 用户管理类单例对象指针*\/$/;"	m	class:UserManage
m_port	server/src/Server.h	/^    int     m_port;             \/* 服务器监听端口*\/$/;"	m	class:Server
m_prot	client/src/Client.h	/^    Protocol m_prot;        \/* 协议包*\/$/;"	m	class:Client
m_prot	server/src/Task.h	/^    Protocol  m_prot;       \/* 该任务对象应处理的协议包*\/$/;"	m	class:Task
m_pwd	client/src/Client.h	/^    char m_pwd[ PWD_LENGTH ];        \/* 密码*\/$/;"	m	class:Client
m_scanThread	client/src/AutoUpload.h	/^    pthread_t  m_scanThread;      \/* 浏览目录线程*\/$/;"	m	class:AutoUpload
m_sevIP	client/src/Client.h	/^    char m_sevIP[16];       \/* 服务端IP地址*\/$/;"	m	class:Client
m_sevPort	client/src/Client.h	/^    int  m_sevPort;         \/* 服务端端口*\/$/;"	m	class:Client
m_sockFd	client/src/Client.h	/^    int  m_sockFd;          \/* 客户端套接字描述符*\/$/;"	m	class:Client
m_sockFd	common/inc/common.h	/^    int     m_sockFd;       \/* 客户端套接字描述符*\/$/;"	m	struct:Protocol
m_sockFd	server/src/Task.h	/^    int       m_sockFd;     \/* 与客户端通信套接字*\/$/;"	m	class:Task
m_taskList	server/src/TaskThread.h	/^    list<Task*> m_taskList[2];  \/* 任务链表数组*\/$/;"	m	class:TaskThread
m_tid	server/src/TaskThread.h	/^    pthread_t    m_tid;     \/* 线程id*\/$/;"	m	class:TaskThread
m_uploadQueue	client/src/AutoUpload.h	/^    queue< UploadTask*> m_uploadQueue;   \/* 文件上传队列*\/$/;"	m	class:AutoUpload
m_uploadThread	client/src/AutoUpload.h	/^    pthread_t  m_uploadThread;    \/* 上传文件线程*\/$/;"	m	class:AutoUpload
m_userName	client/src/Client.h	/^    char m_userName[ NAME_LENGTH ];  \/* 用户名*\/$/;"	m	class:Client
m_userName	common/inc/common.h	/^    char    m_userName[ NAME_LENGTH ];   \/* 用户名*\/$/;"	m	struct:Protocol
m_userName	common/inc/common.h	/^    char m_userName[ NAME_LENGTH ];       \/* 用户名*\/$/;"	m	struct:UserInfo
m_userPwd	common/inc/common.h	/^    char m_userPwd[ PWD_LENGTH ];         \/* 密码*\/$/;"	m	struct:UserInfo
main	client/src/main.cpp	/^int main(void)$/;"	f
main	server/src/main.cpp	/^int main(void)$/;"	f
needRecv	server/src/Server.cpp	/^    int needRecv;$/;"	m	struct:UserRequest	file:
prot	server/src/Server.cpp	/^    Protocol  prot;$/;"	m	struct:UserRequest	file:
setSocketNoneblocking	server/src/Server.cpp	/^void setSocketNoneblocking( int fd )$/;"	f
signal	common/inc/common.h	/^    bool signal()$/;"	f	class:Cond
trylock	common/inc/common.h	/^    bool trylock()$/;"	f	class:Mutex
unlock	common/inc/common.h	/^    bool unlock()$/;"	f	class:Mutex
wait	common/inc/common.h	/^    bool wait()$/;"	f	class:Cond
~Client	client/src/Client.cpp	/^Client::~Client()                   $/;"	f	class:Client
~Cond	common/inc/common.h	/^    ~Cond()$/;"	f	class:Cond
~Mutex	common/inc/common.h	/^    ~Mutex()$/;"	f	class:Mutex
~Server	server/src/Server.cpp	/^Server::~Server()$/;"	f	class:Server
~Task	server/src/Task.cpp	/^Task::~Task()$/;"	f	class:Task
~TaskThread	server/src/TaskThread.cpp	/^TaskThread::~TaskThread()$/;"	f	class:TaskThread
~ThreadPool	server/src/ThreadPool.cpp	/^ThreadPool::~ThreadPool()$/;"	f	class:ThreadPool
